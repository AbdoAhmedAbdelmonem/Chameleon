let question = [
    { numb: 1, type: "Multiple Choices", question: "What is a doubly linked list?", options: ["A list where each node has a pointer to the next node only", "A list where each node has pointers to both previous and next nodes", "A list with fixed-size elements", "A list that does not allow deletions"], answer: "A list where each node has pointers to both previous and next nodes" },
    { numb: 2, type: "Multiple Choices", question: "Which additional pointer is used in a doubly linked list compared to a singly linked list?", options: ["Random pointer", "Previous pointer", "Tail pointer", "Index pointer"], answer: "Previous pointer" },
    { numb: 3, type: "Multiple Choices", question: "What is the advantage of a doubly linked list over a singly linked list?", options: ["Faster traversal in both directions", "Less memory usage", "No need for extra pointers", "Sorting is easier"], answer: "Faster traversal in both directions" },
    { numb: 4, type: "Multiple Choices", question: "How do you traverse a doubly linked list?", options: ["Only forward", "Only backward", "Both forward and backward", "Randomly"], answer: "Both forward and backward" },
    { numb: 5, type: "Multiple Choices", question: "What is a common disadvantage of a doubly linked list?", options: ["More memory usage due to extra pointers", "Slow insertions and deletions", "Cannot be implemented in C++", "Requires sorting before use"], answer: "More memory usage due to extra pointers" },
    { numb: 6, type: "Multiple Choices", question: "Which of the following operations requires updating both next and previous pointers?", options: ["Insertion", "Traversal", "Searching", "None of the above"], answer: "Insertion" },
    { numb: 7, type: "Multiple Choices", question: "What happens when the head node is deleted in a doubly linked list?", options: ["The previous node becomes the new head", "The next node becomes the new head", "The entire list is deleted", "No change occurs"], answer: "The next node becomes the new head" },
    { numb: 8, type: "Multiple Choices", question: "What is the minimum number of pointers needed to maintain a doubly linked list?", options: ["1", "2", "3", "4"], answer: "2" },
    { numb: 9, type: "Multiple Choices", question: "Which data structure is commonly used for navigation in both forward and backward directions?", options: ["Singly linked list", "Doubly linked list", "Stack", "Queue"], answer: "Doubly linked list" },
    { numb: 10, type: "Multiple Choices", question: "How is the last node of a doubly linked list identified?", options: ["It has a null next pointer", "It has a null previous pointer", "It is always the first node", "It has the highest value"], answer: "It has a null next pointer" },
    { numb: 11, type: "Multiple Choices", question: "Which operation is more efficient in a doubly linked list compared to a singly linked list?", options: ["Traversal", "Insertion at head", "Deletion at tail", "All of the above"], answer: "All of the above" },
    { numb: 12, type: "Multiple Choices", question: "How do you delete a node in a doubly linked list?", options: ["By only updating the next pointer", "By updating both next and previous pointers", "By deleting all nodes", "By sorting the list first"], answer: "By updating both next and previous pointers" },
    { numb: 13, type: "Multiple Choices", question: "Which type of linked list allows constant-time insertions and deletions at both ends?", options: ["Singly linked list", "Doubly linked list", "Array", "Binary tree"], answer: "Doubly linked list" },
    { numb: 14, type: "Multiple Choices", question: "What is required to reverse a doubly linked list?", options: ["Swapping next and previous pointers", "Sorting the list", "Adding new nodes", "None of the above"], answer: "Swapping next and previous pointers" },
    { numb: 15, type: "Multiple Choices", question: "Which pointer is null in an empty doubly linked list?", options: ["Head", "Tail", "Both Head and Tail", "None"], answer: "Both Head and Tail" },
    { numb: 16, type: "Multiple Choices", question: "What happens if you insert a node at the tail of a doubly linked list?", options: ["The new node becomes the new tail", "The old tail is deleted", "The list is sorted", "Nothing changes"], answer: "The new node becomes the new tail" },
    { numb: 17, type: "Multiple Choices", question: "Which linked list allows bidirectional traversal?", options: ["Singly linked list", "Doubly linked list", "Circular linked list", "Queue"], answer: "Doubly linked list" },
    { numb: 18, type: "Multiple Choices", question: "What is the worst-case time complexity for searching in a doubly linked list?", options: ["O(1)", "O(n)", "O(log n)", "O(n^2)"], answer: "O(n)" },
    { numb: 19, type: "Multiple Choices", question: "Which linked list type requires extra memory for each node?", options: ["Singly linked list", "Doubly linked list", "Array", "Queue"], answer: "Doubly linked list" },
    { numb: 20, type: "Multiple Choices", question: "Which of the following is an application of a doubly linked list?", options: ["Browser navigation history", "Stack memory allocation", "Binary search trees", "Priority queues"], answer: "Browser navigation history" }
];