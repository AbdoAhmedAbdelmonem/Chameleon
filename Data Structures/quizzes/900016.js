let question = [
    {
        numb: 1,
        type: "Multiple Choice",
        question: "Which sorting algorithm has a worst-case time complexity of O(n²)?",
        options: ["Merge Sort", "Quick Sort", "Bubble Sort", "Heap Sort"],
        answer: "Bubble Sort",
    },
    {
        numb: 2,
        type: "Multiple Choice",
        question: "What is the time complexity of Binary Search in a sorted array?",
        options: ["O(1)", "O(n)", "O(log n)", "O(n log n)"],
        answer: "O(log n)",
    },
    {
        numb: 3,
        type: "Multiple Choice",
        question: "Which algorithm uses a 'divide and conquer' strategy?",
        options: ["Bubble Sort", "Insertion Sort", "Merge Sort", "Selection Sort"],
        answer: "Merge Sort",
    },
    {
        numb: 4,
        type: "Multiple Choice",
        question: "In Linear Search, the worst-case scenario occurs when:",
        options: ["The element is at the beginning", "The element is at the end", "The element is not present", "The array is sorted"],
        answer: "The element is not present",
    },
    {
        numb: 5,
        type: "Multiple Choice",
        question: "Which sorting algorithm is stable?",
        options: ["Quick Sort", "Heap Sort", "Merge Sort", "Shell Sort"],
        answer: "Merge Sort",
    },
    {
        numb: 6,
        type: "Multiple Choice",
        question: "What is the best-case time complexity of Insertion Sort?",
        options: ["O(n)", "O(n²)", "O(n log n)", "O(1)"],
        answer: "O(n)",
    },
    {
        numb: 7,
        type: "Multiple Choice",
        question: "Which algorithm is NOT an in-place sorting algorithm?",
        options: ["Quick Sort", "Heap Sort", "Merge Sort", "Bubble Sort"],
        answer: "Merge Sort",
    },
    {
        numb: 8,
        type: "Multiple Choice",
        question: "What is the pivot element used in?",
        options: ["Merge Sort", "Quick Sort", "Bubble Sort", "Binary Search"],
        answer: "Quick Sort",
    },
    {
        numb: 9,
        type: "Multiple Choice",
        question: "Which algorithm is suitable for finding the k-th smallest element efficiently?",
        options: ["Bubble Sort", "Quick Select", "Linear Search", "Insertion Sort"],
        answer: "Quick Select",
    },
    {
        numb: 10,
        type: "Multiple Choice",
        question: "What is the space complexity of Heap Sort ?",
        options: ["O(1)", "O(n)", "O(log n)", "O(n log n)"],
        answer: "O(1)",
    },
    {
        numb: 11,
        type: "Multiple Choice",
        question: "Which of the following sorting algorithms is the fastest on average?",
        options: ["Bubble Sort", "Insertion Sort", "Quick Sort", "Selection Sort"],
        answer: "Quick Sort",
    },
    {
        numb: 12,
        type: "Multiple Choice",
        question: "What is the time complexity of the Selection Sort algorithm?",
        options: ["O(n)", "O(n log n)", "O(n²)", "O(log n)"],
        answer: "O(n²)",
    },
    {
        numb: 13,
        type: "Multiple Choice",
        question: "Which searching algorithm is used on sorted arrays?",
        options: ["Linear Search", "Binary Search", "Jump Search", "Exponential Search"],
        answer: "Binary Search",
    },
    {
        numb: 14,
        type: "Multiple Choice",
        question: "What is the average time complexity of Quick Sort?",
        options: ["O(n)", "O(n log n)", "O(n²)", "O(log n)"],
        answer: "O(n log n)",
    },
    {
        numb: 15,
        type: "Multiple Choice",
        question: "Which of the following is a characteristic of a stable sorting algorithm?",
        options: ["Maintains the relative order of equal elements", "Always sorts in ascending order", "Has a time complexity of O(n log n)", "Uses a divide and conquer approach"],
        answer: "Maintains the relative order of equal elements",
    },
    {
        numb: 16,
        type: "Multiple Choice",
        question: "In which scenario is Binary Search NOT applicable?",
        options: ["When the array is sorted", "When the array is unsorted", "When searching for an element", "When using a sorted linked list"],
        answer: "When the array is unsorted",
    },
    {
        numb: 17,
        type: "Multiple Choice",
        question: "Which sorting algorithm is best for small datasets?",
        options: ["Quick Sort", "Merge Sort", "Insertion Sort", "Heap Sort"],
        answer: "Insertion Sort",
    },
    {
        numb: 18,
        type: "Multiple Choice",
        question: "What is the worst-case time complexity of Merge Sort?",
        options: ["O(n)", "O(n log n)", "O(n²)", "O(log n)"],
        answer: "O(n log n)",
    },
    {
        numb: 19,
        type: "Multiple Choice",
        question: "Which of the following algorithms is used for searching in a sorted linked list?",
        options: ["Linear Search", "Binary Search", "Jump Search", "Interpolation Search"],
        answer: "Linear Search",
    },
    {
        numb: 20,
        type: "Multiple Choice",
        question: "What is the primary advantage of using Quick Sort over other sorting algorithms?",
        options: ["Simplicity", "Stability", "In-place sorting", "Guaranteed O(n log n) performance"],
        answer: "In-place sorting",
    },
    {
        numb: 21,
        type: "Multiple Choice",
        question: "Which of the following sorting algorithms is considered the simplest?",
        options: ["Bubble Sort", "Quick Sort", "Merge Sort", "Heap Sort"],
        answer: "Bubble Sort",
    },
    {
        numb: 22,
        type: "Multiple Choice",
        question: "What is the primary disadvantage of using Bubble Sort?",
        options: ["It is not stable", "It has a high time complexity", "It requires additional memory", "It is difficult to implement"],
        answer: "It has a high time complexity",
    },
    {
        numb: 23,
        type: "Multiple Choice",
        question: "Which searching algorithm divides the array into halves to find an element?",
        options: ["Linear Search", "Binary Search", "Jump Search", "Interpolation Search"],
        answer: "Binary Search",
    },
    {
        numb: 24,
        type: "Multiple Choice",
        question: "What is the time complexity of the worst-case scenario for Insertion Sort?",
        options: ["O(n)", "O(n log n)", "O(n²)", "O(log n)"],
        answer: "O(n²)",
    },
    {
        numb: 25,
        type: "Multiple Choice",
        question: "Which of the following algorithms is best suited for sorting linked lists?",
        options: ["Quick Sort", "Merge Sort", "Bubble Sort", "Selection Sort"],
        answer: "Merge Sort",
    },
    {
        numb: 26,
        type: "Multiple Choice",
        question: "What is the main advantage of using Heap Sort?",
        options: ["It is stable", "It has a guaranteed O(n log n) time complexity", "It is simple to implement", "It is faster than Quick Sort"],
        answer: "It has a guaranteed O(n log n) time complexity",
    },
    {
        numb: 27,
        type: "Multiple Choice",
        question: "Which of the following is a characteristic of the Selection Sort algorithm?",
        options: ["It is stable", "It is adaptive", "It always performs O(n²) comparisons", "It is a divide and conquer algorithm"],
        answer: "It always performs O(n²) comparisons",
    },
    {
        numb: 28,
        type: "Multiple Choice",
        question: "In which scenario is Interpolation Search more efficient than Binary Search?",
        options: ["When the array is sorted", "When the array has uniformly distributed values", "When the array is small", "When the array is unsorted"],
        answer: "When the array has uniformly distributed values",
    },
    {
        numb: 29,
        type: "Multiple Choice",
        question: "What is the primary purpose of the 'partition' step in Quick Sort?",
        options: ["To divide the array into two halves", "To find the median", "To rearrange elements around a pivot", "To sort the elements in place"],
        answer: "To rearrange elements around a pivot",
    },
    {
        numb: 30,
        type: "Multiple Choice",
        question: "Which of the following algorithms is NOT a comparison-based sorting algorithm?",
        options: ["Merge Sort", "Quick Sort", "Counting Sort", "Heap Sort"],
        answer: "Counting Sort",
    }
];